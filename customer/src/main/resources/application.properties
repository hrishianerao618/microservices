
# Database configuration
spring.datasource.url=jdbc:postgresql://localhost:5432/dvdrental_customer
spring.datasource.username=postgres
spring.datasource.password=postgres

# Hibernate properties
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=none

server.port=8081
spring.application.name=customer

#Eureka server location
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/



#Resilience4j properties
resilience4j.circuitbreaker.instances.rental.registerHealthIndicator=true
#This property indicates whether a health indicator bean should be registered for the CircuitBreaker
resilience4j.circuitbreaker.instances.rental.slidingWindowSize=5
#This determines how many calls are included in the statistics used to calculate the CircuitBreaker's state.
resilience4j.circuitbreaker.instances.rental.slidingWindowType=COUNT_BASED
 #Specifies whether the sliding window is based on a count of calls (COUNT_BASED) or a time interval (TIME_BASED).
resilience4j.circuitbreaker.instances.rental.permittedNumberOfCallsInHalfOpenState=3
#The number of permitted calls in the half-open state. When the CircuitBreaker transitions from the open state to the half-open state, this property determines the number of calls that are allowed to pass through before the state is recalculated.
resilience4j.circuitbreaker.instances.rental.minimumNumberOfCalls=2
# The minimum number of calls required before the CircuitBreaker can calculate its state. If the number of calls is below this threshold, the CircuitBreaker will remain closed.
resilience4j.circuitbreaker.instances.rental.waitDurationInOpenState=5s
#The time duration that the CircuitBreaker remains open before transitioning to the half-open state. This duration helps to give the downstream service some time to recover.
resilience4j.circuitbreaker.instances.rental.slowCallRateThreshold=10
#The threshold percentage above which the CircuitBreaker considers a call to be slow. If the actual percentage of slow calls exceeds this threshold, the CircuitBreaker's state is affected.
resilience4j.circuitbreaker.instances.rental.slowCallDurationThreshold=2
#The duration above which a call is considered slow. Calls with a duration exceeding this threshold are counted as slow calls.
resilience4j.circuitbreaker.instances.rental.failureRateThreshold=50
 #The threshold percentage above which the CircuitBreaker transitions from the closed state to the open state. If the failure rate (failed calls / total calls) exceeds this threshold, the CircuitBreaker opens.

resilience4j.timelimiter.instances.rental.timeout-duration=3s
#This property configures the timeout duration for the TimeLimiter in the "rental" circuit breaker instance.

resilience4j.circuitbreaker.instances.rental.event-consumer-buffer-size=10
#This property sets the buffer size for the event consumer in the "rental" circuit breaker instance. The event consumer captures events related to the circuit breaker's state transitions and stores them in the buffer.
resilience4j.circuitbreaker.instances.rental.automaticTransitionFromOpenToHalfOpenEnabled=true
# This property enables automatic transition from the "open" state to the "half-open" state in the "rental" circuit breaker instance.

#Resilience4J Retry Properties
resilience4j.retry.instances.rental.max-attempts=3
#This property sets the maximum number of retry attempts for the "rental" retry instance. If a request fails, the retry mechanism will attempt to call the API again up to a maximum of 3 times.
resilience4j.retry.instances.rental.wait-duration=5s
#This property specifies the wait duration between retry attempts in the "rental" retry instance. After a failed attempt, the retry mechanism will wait for 5 seconds before making the next attempt.

#Actuator
management.health.rental.enabled=true
management.endpoint.health.show-details=always
management.endpoints.web.exposure.include=health
management.health.circuitbreakers.enabled=true


management.tracing.enabled=true
management.tracing.sampling.probability=1.0
#This property determines the probability of a trace being sampled. A value of 1.0 means that all traces will be captured (100% sampling rate), while a value of 0.0 means no traces will be captured (0% sampling rate).

management.zipkin.tracing.endpoint=http://localhost:9411
#This property specifies the base URL of the Zipkin server where trace data will be sent for visualization.

logging.pattern.level=%5p [${spring.zipkin.service.name:${spring.application.name:}},%X{traceId:-},%X{spanId:-}]